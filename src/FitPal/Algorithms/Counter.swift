//
// Created by dykderrick on 2021/12/23.
//
// FitPal
//
// Copyright Â© 2021 Derrick Ding. All rights reserved.
//
	 

import Foundation


fileprivate func filterData(totalDataLength: Int, accelerometer: [Double]) -> [Double] {
    var filteredData: [Double] = []
    let filterMask = 10
    
    
    for i in filterMask + 1 ... totalDataLength {
        filteredData.append(accelerometer[i - filterMask - 1 ... i - 2].reduce(0, +) / 10)
    }
    
    return filteredData
    
}


func getSegmentationNumAndCorrelations(accelerometer: [Double], segStart: Int, segThreshold: Double, truth: [Double]) -> (Int, [Double]) {
    let filteredData = filterData(totalDataLength: accelerometer.count, accelerometer: accelerometer)
    let totalDataLength = filteredData.count
    
    var temp = Array(repeating: 0.0, count: totalDataLength)
    var segIndex: [Int] = []
    var segValue: [Double] = []
    
    for i in segStart + 1 ... totalDataLength {
        if filteredData[i - 1] - filteredData[i - segStart - 1] > segThreshold {
            temp[i - 1] = 1
        } else {
            temp[i - 1] = 0
        }
    }
    
    for i in segStart + 2 ... totalDataLength {
        if temp[i - 1] == 1 {
            if temp[i - segStart - 2 ... i - 2].reduce(0, +) == 0.0 {
                segIndex.append(i - 1)
                segValue.append(filteredData[i - 1])
            }
        }
    }
    
    let segmentationNum = segIndex.count
    var correlations: [Double] = []
    
    if segmentationNum >= 2 {
        for i in 1 ... segmentationNum - 1 {
            
            var sample: [Double] = []
            
            for l in segIndex[i - 1] ... segIndex[i] {
                sample.append(filteredData[l - 1])
            }
            
            let c = getCorrelationArray(sample: sample, truth: truth)
            correlations.append(c.max()!)
            
            //if correlation! > 0.07 {
                //count += 1
            //}
        }
    }
    
    return (segmentationNum, correlations)
}

let truths = [
    "Bench Press": [
        0.034875,0.079652,0.11913,0.1785,0.25144,0.28784,0.32186,0.37723,0.42789,0.43201,0.40554,0.39426,0.34543,0.27671,0.20631,0.1571,0.091807,0.026541,-0.030438,-0.068244,-0.078915,-0.089813,-0.073207,-0.057258,-0.03283,-0.027422,-0.0095035,0.014673,0.020223,0.02058,0.020666,0.015394,0.011729,0.0028089,-0.006159,-0.0014067,0.0010475,-0.0022672,0.0046033,0.014053,0.01943,0.027426,0.034832,0.041236,0.051526,0.059368,0.064021,0.082669,0.10456,0.11211,0.11664,0.13851,0.17179,0.18093,0.16947,0.17896,0.20936,0.19929,0.16157,0.17536,0.20331,0.16497,0.11702,0.13007,0.13041,0.087985,0.053067,0.044078,0.034671,0.0020311,-0.032699,-0.041868,-0.046668,-0.078301,-0.095494,-0.095442,-0.10996,-0.12836,-0.12778,-0.14201,-0.1682,-0.1676,-0.1772,-0.22031,-0.22885,-0.23711,-0.27317,-0.28302,-0.29972,-0.31633,-0.31568,-0.32223,-0.32685,-0.29962,-0.28923,-0.29135,-0.26543,-0.24722,-0.22851,-0.21976,-0.21319,-0.1967,-0.18774,-0.18101,-0.18054,-0.15367,-0.14049,-0.15259,-0.14629,-0.10653,-0.068162,-0.047854,-0.030125,-0.005853,0.048474,0.12283
    ],
    
    "Russian Twist": [
        0.37959,0.39148,0.41032,0.43454,0.45704,0.47202,0.48033,0.48585,0.49385,0.51591,0.54313,0.5757,0.61213,0.63867,0.65469,0.67659,0.71734,0.75793,0.76377,0.74692,0.73865,0.72385,0.68507,0.63845,0.59971,0.5635,0.51534,0.46997,0.44705,0.42644,0.40584,0.40688,0.43081,0.46367,0.49286,0.51251,0.5271,0.53712,0.5568,0.58967,0.61893,0.63001,0.63155,0.63389,0.6327,0.62081,0.59694,0.57417,0.55268,0.52811,0.50141,0.47671,0.45239,0.42471,0.3924,0.36862,0.35886,0.34096,0.30642,0.26451,0.22232,0.18346,0.14854,0.11443,0.085216,0.054563,0.012744,-0.036492,-0.086961,-0.14416,-0.19829,-0.27927,-0.35677,-0.41454,-0.47354,-0.52657,-0.58255,-0.64736,-0.67661,-0.66772,-0.65173,-0.61506,-0.57521,-0.53414,-0.47579,-0.41971,-0.35391,-0.24837,-0.14666,-0.064068,0.0037056,0.073452,0.13607,0.17738,0.20217,0.23146,0.27101,0.30139,0.31795,0.32578,0.33441,0.34165

    ],
    
    "Barbell Rowing": [
        0.26427,0.28161,0.24911,0.24464,0.24763,0.22925,0.21731,0.18848,0.15818,0.14438,0.11612,0.093772,0.091815,0.073153,0.041823,0.031331,0.034237,0.027033,0.0083341,0.0040394,0.01166,0.0060547,-0.00044289,0.0018847,0.0055229,0.0081919,0.0049057,0.0082671,0.016013,0.01466,0.0086468,0.013113,0.016974,0.0149,0.013266,0.011679,0.0098351,0.0054828,0.005001,0.002493,-0.0025746,-0.0056887,-0.0062706,-0.0097432,-0.010476,-0.0090838,-0.01259,-0.015386,-0.015482,-0.010367,-0.0069632,-0.0067539,-0.0046685,-0.0013454,0.0010294,0.0046526,0.015186,0.020639,0.021727,0.031336,0.044167,0.051176,0.062102,0.081567,0.098001,0.10768,0.12496,0.14905,0.1621,0.17525,0.20195,0.22417,0.23364,0.23859,0.24838,0.25773,0.25551,0.24897,0.24497,0.23142,0.20577,0.18323,0.15615,0.12332,0.084941,0.047683,0.013303,-0.030296,-0.074254,-0.12239,-0.16208,-0.19155,-0.22416,-0.25942,-0.29856,-0.33347,-0.37051,-0.39662,-0.42041,-0.43611,-0.45823,-0.48268,-0.48908,-0.48403,-0.46463,-0.44584,-0.42996,-0.40442,-0.35619,-0.31307,-0.27975,-0.24081,-0.19665,-0.14953,-0.10149,-0.068815,-0.037146,0.017122,0.063943,0.072642,0.10178,0.15228,0.1806,0.1994,0.2101,0.2165
    ],
    
    "Pec Fly":[
        0.033924,0.034421,0.028384,0.024474,0.025954,0.02565,0.022639,0.017379,0.019344,0.01797,0.016282,0.01441,0.012692,0.011026,0.0085393,0.0020897,-0.0039348,-0.0084164,-0.0085671,-0.012778,-0.018251,-0.019929,-0.016011,-0.016153,-0.027747,-0.034712,-0.029545,-0.01726,-0.012424,-0.015424,-0.018604,-0.012231,-0.016066,-0.027896,-0.019383,-0.0071503,-0.013777,-0.033232,-0.034513,-0.035245,-0.031246,-0.041892,-0.035097,-0.023568,-0.022049,-0.025851,-0.02212,-0.013291,-0.015505,-0.00077788,0.0015927,0.011692,0.0090381,0.0062023,0.012191,0.021256,0.02747,0.034589,0.04172
    ],
]

//print(getSegmentationNumAndCorrelations(accelerometer: testData, segStart: 40, segThreshold: 0.05, truth: truths["Pec Fly"]!))
